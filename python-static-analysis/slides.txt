Python static analysis tools
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ Author    Tomas Kala
■ Date      2023-05-17


What is static analysis (good for)?
───────────────────────────────────────────────────────────────────────────────
■ Quickly find (possible) bugs and style issues in your code
  ▶ Static = without running the code
  ▶ Especially important for interpreted languages like Python
  ▶ Command line tools that fail if some rules are broken
■ I'll also include code formatters in the definition
  ▶ Enforce uniform coding style, e.g., {"key": value} vs dict(key=value)
■ Not dependent on the developer having written tests


Examples
───────────────────────────────────────────────────────────────────────────────
■ Python
  ▪ Black (code formatting), isort (imports ordering).
  ▪ autoflake, flake8, pyflakes, bandit, mypy, ...
  ▪ ruff (more on that later)
■ Go
  ▪ gofmt (code formatting)
  ▪ go vet (valid but questionable constructs)
■ Shell
  ▪ shellcheck


Live demo
───────────────────────────────────────────────────────────────────────────────
■ "It worked just a few minutes ago!"
■ "I have no idea why it's not working!"


How do you introduce something like that at work?
───────────────────────────────────────────────────────────────────────────────
■ Very slowly, one module at a time and not on a Friday
  ▪ Agree on the tools
  ▪ Do a PR showing the changes and let other team members comment
  ▪ Make sure everybody's workflow is compatible
  ▪ Enable in CI
  ▪ Fix (many) conflicts
  ▪ Merge quickly
■ Should CI auto format or just check?
■ How not to ruin git blame
  ▪ git config blame.ignoreRevsFile .git-blame-ignore-revs


Ruff
───────────────────────────────────────────────────────────────────────────────
■ A Rust implementation of many existing linters
  ▪ isort, flake8 + all plugins, bandit, subset of pylint, ...
■ Entirely configured in a pyproject.toml file
  ▶ Can specify Python version
■ Many issues are auto-fixable
■ ~Weekly releases
■ Used in Apache Airflow, Pandas, SciPy, FastAPI, ...


Live demo
───────────────────────────────────────────────────────────────────────────────
■ "I have no idea why it's working!"
■ "This happens every time I do a live demo!"


End results
───────────────────────────────────────────────────────────────────────────────
■ Enforcing uniform code style
■ Catching code smells and common errors in the pipelines
■ Single configuration file for all linters
■ Team members happy
